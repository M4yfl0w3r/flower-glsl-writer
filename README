GLSL writer

    The library is not type-safe and does not prevent you from writing incorrect
    GLSL code. It generates GLSL code at compile-time using a compile-time
    string implementation (src/static_string.hpp)

    The most important function in the library is the concat function
        
        template <std::size_t... len>
        consteval auto concat(const static_string<len>&... strings)

    This function forms the basis of every operation. The library is not a GLSL
    compiler but rather an expression concatenator. It defines types, values,
    and operations from GLSL as strings and allows you to build code using these
    strings as building blocks.


TODO

    * a struct of all declared variables to return lvalues?
    * lvalue arrays
    * custom type registration (Light)
    * type system validation
    * a compile-time float to string converter
    * check if an expression is passable to a function
    * named template arguments
    * Param should take a variable as an argument



Expression types 

    * Variables (src/variable.hpp | test/variables.cpp)
    * Functions (src/function.hpp | test/functions.cpp)
    * Statements (src/statement.hpp | test/statements.cpp)
    * Structures (src/structure.hpp | test/structures.cpp)
